// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  stories           Story[]
  bookComments      BookComment[]
  chapterComments   ChapterComment[]
  paragraphComments ParagraphComment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Story {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  originUrl String @unique // 唯一标识一本小说 key是 originUrl，去掉 query 参数等
  tags      Tag[]  @relation("storyTags")
  name      String
  books Book[]

  @@unique([authorId, name])
  @@index([deletedAt])
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stories    Story[]    @relation("storyTags")
  tagValues TagValue[]
}

model TagValue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  lang  String // zh | en https://i18ns.com/languagecode.html
  name  String

  @@unique([tagId, lang])
}

model Book {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  storyId String
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  version String // origin | modified | en | zh

  chapters Chapter[]
  cover    String
  size     Int // 字数
  comments BookComment[]

  @@unique([storyId, name])
  @@index([deletedAt])
}

model BookComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content String
  bookId  String
  book    Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  userId String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChapterComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content   String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userId String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ParagraphComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content     String
  paragraphId String
  paragraph   Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)

  userId String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chapter {
  id         String           @id @default(cuid())
  index      Int
  createdAt  DateTime         @default(now())
  updatedAt DateTime @updatedAt
  deletedAt  DateTime?
  bookId     String
  book       Book             @relation(fields: [bookId], references: [id], onDelete: Cascade)
  paragraphs Paragraph[]
  comments   ChapterComment[]

  @@unique([bookId, index])
  @@index([deletedAt])
  @@index([index])
}

model Paragraph {
  id        String             @id @default(cuid())
  index     Int
  type String // text | image | ad...
  content   String
  createdAt DateTime           @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  chapter   Chapter            @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String
  comments  ParagraphComment[]

  @@unique([chapterId, index])
  @@index([deletedAt])
  @@index([index])
}
